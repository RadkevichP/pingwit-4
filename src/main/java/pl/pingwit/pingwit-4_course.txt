//////////////////////////
/////// Lecture 1  ///////
//////////////////////////

1. Рассказать про запись занятий, помощь друг другу, все вопросы в общий чат, домашка и дедлайны
2. Введение в Java - кроссплатформенность, JVM, byte code
3. Настройка Intellij Idea, Path Variable
4. Запуск и компиляция программы в текстовом редакторе, HelloWorld внутри Intellij Idea
5. Типы данных (byte, short, char, int, long, float, double, boolean, String)
6. Операторы в джава. +, -, /, *, %, >, <, !=, >>, <<, x++/ ++x, x--/ --x, оператор+=, приоритет операций


Полезный сайт по java:
https://metanit.com/java/tutorial/

Комьюнити сайт:
https://stackoverflow.com/

Intellij Idea:
https://www.jetbrains.com/ru-ru/idea/download/#section=windows

Скачать 17 JDK: https://jdk.java.net/archive/
Apple M1: Mac/AArch64
Apple Intel: Mac/x64


//////////////////////////
/////// Lecture 2  ///////
//////////////////////////

1. Приведение типов.
2. Типы-обертки (wrappers)
3. Знакомство с Git и GitHub. Git commit, fetch+merge, pull, push
4. Процесс проверки домашнего задания

Git:
git for Windows: https://git-scm.com/download/win
git for mac: https://git-scm.com/download/mac


//////////////////////////
/////// Lecture 3  ///////
//////////////////////////

1. if-else, if-else-if
2. Ternary (Elvis)
3. Switch / Switch Java 17
4. Цикл for


//////////////////////////
/////// Lecture 4  ///////
//////////////////////////

1. while, do-while
2. continue, break, return
3. Class Scanner


//////////////////////////
/////// Lecture 5  ///////
//////////////////////////

1. Массивы, инициализация, доступ к элементу, двумерные массивы
2. for-each, печать через Arrays.toString()
3. Сложность алгоритма
4. Сортировка пузырьком - O(n²) in the average

Временная сложность алгоритма (в худшем случае) — это функция от размера входных данных,
равная максимальному количеству элементарных операций, проделываемых алгоритмом для решения
экземпляра задачи указанного размера.

Тогда было предложено измерять сложность алгоритмов в элементарных шагах - то,
сколько действий необходимо совершить для его выполнения.
Любой алгоритм включает в себя определённое количество шагов и неважно
на каком устройстве он будет запущен, количество шагов останется неизменным.
Эту идею принято представлять в виде Big O (или О-нотации).

Big O показывает то, как сложность алгоритма растёт с увеличением входных данных.
При этом она всегда показывает худший вариант развития событий - верхнюю границу.


//////////////////////////
/////// Lecture 6  ///////
//////////////////////////

1. Понятие класса, объекта, конструктора, this для конструктора
2. Инициализация полей (примитивы, объекты, static поля)
3. Блоки инициализации (static / nonstatic)
4. toString()


//////////////////////////
/////// Lecture 7  ///////
//////////////////////////

1. Методы класса - static / nonstatic
2. Модификаторы доступа, getters/setters
3. Порядок расположения полей, конструкторов и методов в классе
